<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- Configure to plugin JSON as request and response in method handler -->
	<beans:bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<beans:property name="messageConverters">
			<beans:list>
				<beans:ref bean="jsonMessageConverter"/>
			</beans:list>
		</beans:property>
	</beans:bean>
	
	<!-- Configure bean to convert JSON to POJO and vice versa -->
	<beans:bean id="jsonMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
	</beans:bean>	

	<beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<beans:property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<beans:property name="url"
			value="jdbc:mysql://localhost:3306/ripper_fit" />
		<beans:property name="username" value="root" />
		<beans:property name="password" value="riya" />
	</beans:bean>

	<!-- Hibernate 4 SessionFactory Bean definition. All beans are defined -->
	<beans:bean id="hibernate4AnnotatedSessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="annotatedClasses">
			<beans:list>
				<beans:value>com.ripperfit.model.Designation</beans:value>
				<beans:value>com.ripperfit.model.Employee</beans:value>
				<beans:value>com.ripperfit.model.Resource</beans:value>
				<beans:value>com.ripperfit.model.ResourceRequest</beans:value>
			</beans:list>
		</beans:property>
		<beans:property name="hibernateProperties">
			<beans:props>
				<beans:prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect
				</beans:prop>
				<beans:prop key="hibernate.show_sql">true</beans:prop>
				<beans:prop key="hibernate.enable_lazy_load_no_trans">true</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>
	
	<!--  Dao Beans -->
	<beans:bean id="userDao" class="com.ripperfit.daoLayer.UserDao">
		<beans:property name="sessionFactory"
			ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>
	
	<beans:bean id="resourceDao" class="com.ripperfit.daoLayer.ResourceDao">
		<beans:property name="sessionFactory"
			ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>
	
	<!-- Service Beans -->
	<beans:bean id="userService" class="com.ripperfit.service.UserService">
		<beans:property name="userDao" ref="userDao"></beans:property>
	</beans:bean>
	
	<beans:bean id="resourceRequestService" class="com.ripperfit.service.ResourceRequestService">
		<beans:property name="resourceDao" ref="resourceDao"></beans:property>
	</beans:bean>

	<context:component-scan base-package="com.ripperfit.controller" />
	<context:component-scan base-package="com.ripperfit.daoLayer" />
	<context:component-scan base-package="com.ripperfit.model" />
	<context:component-scan base-package="com.ripperfit.service" />
	<context:component-scan base-package="com.ripperfit.util"/>

	<tx:annotation-driven transaction-manager="transactionManager" />

	<beans:bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<beans:property name="sessionFactory"
			ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>

	<!-- connection factories for social login -->

	<beans:bean id="connectionFactoryLocator" class="org.springframework.social.connect.support.ConnectionFactoryRegistry">
		<beans:property name="connectionFactories">
			<beans:list>
			<!--  
				<beans:bean class="org.springframework.social.facebook.connect.FacebookConnectionFactory">
					<beans:constructor-arg name="appId" value="${facebook.clientId}" />
					<beans:constructor-arg name="appSecret" value="${facebook.clientSecret}" />
				</beans:bean>
				<beans:bean class="org.springframework.social.twitter.connect.TwitterConnectionFactory">
					<beans:constructor-arg name="consumerKey" value="${twitter.consumerKey}" />
					<beans:constructor-arg name="consumerSecret" value="${twitter.consumerSecret}" />
				</beans:bean>
				<beans:bean class="org.springframework.social.linkedin.connect.LinkedInConnectionFactory">
					<beans:constructor-arg name="consumerKey" value="${linkedin.consumerKey}" />
					<beans:constructor-arg name="consumerSecret" value="${linkedin.consumerSecret}" />
				</beans:bean>
			-->
				<beans:bean class="org.springframework.social.google.connect.GoogleConnectionFactory">
					<beans:constructor-arg name="clientId" value="412974983923-87ugb9mt5c9mqpofd39ip7jfte20us90.apps.googleusercontent.com" />
					<beans:constructor-arg name="clientSecret" value="7gZJtdL2MREAcbK2MXqZ_64M" />
				</beans:bean>
			</beans:list>
		</beans:property>
	</beans:bean>

</beans:beans>